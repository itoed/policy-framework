# PASSWORD
#

body file control
{
  namespace => "password";
     inputs => {
                "$(inputs:components.common[class])",
               };
}

bundle agent verify_password(password_plain, password_encrypted)
{
  vars:
      "id"              string => canonifyuniquely(
                                              "$(password_plain)_$(password_encrypted)");

      "script_lines"     slist => {
        'import bcrypt',
        'query_id = "$(id)"',
        'plainpw = "$(password_plain)"',
        'encpw = "$(password_encrypted)"',
        'print "^context=verifypassword"',
        'if bcrypt.hashpw(plainpw, encpw) == encpw:',
        '    print "+password_matches_" + query_id',
        'else:',
        '    print "+password_does_not_match_" + query_id',
      };

      "script"          string => join("$(const.n)", "script_lines");

  commands:
      "/usr/bin/python -c '$(script)'"
      module => "true";

  reports:
      "password:password_matches_$(id)"
      bundle_return_value_index => "match";

      "password:password_does_not_match_$(id)"
      bundle_return_value_index => "no_match";
}

bundle agent encrypt_password(password_plain)
{
  vars:
      "id"              string => canonifyuniquely("$(password_plain)");

      "script_lines"     slist => {
        'import bcrypt',
        'query_id = "$(id)"',
        'plainpw = "$(password_plain)"',
        'encpw = bcrypt.hashpw(plainpw, bcrypt.gensalt())',
        'print "^context=encryptpassword"',
        'print "=password_encrypted[{0}]={1}".format(query_id, encpw)',
      };

      "script"          string => join("$(const.n)", "script_lines");

  commands:
      "/usr/bin/python -c '$(script)'"
       module => "true",
      classes => class:namespace("encrypt_password_$(id)");

  reports:
      "password:encrypt_password_$(id)"          bundle_return_value_index => "classprefix";
      "password:encrypt_password_$(id)_error"    bundle_return_value_index => "error";
      "password:encrypt_password_$(id)_ok"       bundle_return_value_index => "ok";
      "password:encrypt_password_$(id)_kept"     bundle_return_value_index => "kept";
      "password:encrypt_password_$(id)_repaired" bundle_return_value_index => "repaired";

      "$(encryptpassword.password_encrypted[$(id)])"
      bundle_return_value_index => "result";
}
