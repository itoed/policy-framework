# UPDATE
#

body common control
{
  bundlesequence => { "cfe_internal_update" };
}

bundle agent cfe_internal_update
{
  methods:
    policy_server::
      "git_update_masterfiles" usebundle => git_update("/var/cfengine/masterfiles");
      "git_update_modules" usebundle => git_update("/var/cfengine/modules");

    any::
      "file_update" usebundle => file_update;

# processes:
#     "$(sys.bindir)/cf-serverd"
#     restart_class => "restart_cf_serverd";

# commands:
#     "$(sys.cf_serverd)"
#     ifvarclass => "restart_cf_serverd";
}

bundle agent file_update
{
  files:
      "/var/cfengine/inputs"
        copy_from  => u_rcp("/var/cfengine/masterfiles", "$(sys.policy_hub)"),
        depth_search => u_recurse("inf"),
        file_select => u_input_files,
        action => u_immediate;

      "/var/cfengine/modules"
        copy_from => u_rcp("/var/cfengine/modules", "$(sys.policy_hub)"),
        depth_search => u_recurse("inf"),
        file_select => u_module_files,
        action => u_immediate,
        perms => u_mog("700", "root", "root");
}

bundle agent git_update(repodir)
{
  vars:
      "id" string => canonify("$(repodir)");

      "git_fetch_script" string => '
git fetch || exit
local=`git rev-parse HEAD`
remote=`git rev-parse @{u}`
base=`git merge-base HEAD @{u}`
if [ $local = $remote ]; then
  echo +up_to_date
elif [ $local = $base ]; then
  echo +merge_required
elif [ $remote = $base ]; then
  echo +ahead_of_remote
else
  echo +diverged
fi';

  classes:
      "git_update_$(id)_error"
        or => {
          "ahead_of_remote",
          "diverged",
          "git_fetch_error",
          "git_merge_error",
        },
        scope => "namespace";

      "git_update_$(id)_kept"
        expression => "up_to_date",
        scope => "namespace";

      "git_update_$(id)_repaired"
        expression => "git_merge_repaired",
        scope => "namespace";

      "git_update_$(id)_ok"
        or => {
          "git_update_$(id)_kept",
          "git_update_$(id)_repaired",
        },
        scope => "namespace";

  commands:
      "/bin/sh -c '$(git_fetch_script)'"
        module => "true",
        contain => u_in_dir("$(repodir)"),
        classes => u_local("git_fetch");

    merge_required::
      "/bin/sh -c 'git merge @{u}'"
        contain => u_in_dir("$(repodir)"),
        classes => u_local("git_merge");

  reports:
    up_to_date.policy_debug_mode::
      "Git repository $(repodir) is up to date";
    merge_required::
      "* Git repository $(repodir) was updated";
    ahead_of_remote::
      "ERROR: Git repository $(repodir) is ahead of tracking branch";
    diverged::
      "ERROR: Git repository $(repodir) has diverged from tracking branch";
    git_fetch_error::
      "ERROR: Fetch operation failed for git repository $(repodir)";
    git_merge_error::
      "ERROR: Merge operation failed for git repository $(repodir)";
}

body copy_from u_rcp(from,server)
{
  source => "$(from)";
  compare => "digest";
  trustkey => "false";
  purge => "true";
!policy_server::
  servers => { "$(server)" };
}

body depth_search u_recurse(d)
{
  depth => "$(d)";
  exclude_dirs => { "\.svn", "\.git", "\.hg", "\.bzr" };
}

body file_select u_input_files
{
  leaf_name => { ".*.cf",".*.dat",".*.txt", ".*.vim", ".*.xml", ".*.conf", ".*.yml" };
  file_result => "leaf_name";
}

body file_select u_module_files
{
  leaf_name => { ".*" };
  file_result => "leaf_name";
}

body action u_immediate
{
  ifelapsed => "0";
}

body perms u_mog(mode, user, group)
{
  owners => { "$(user)" };
  groups => { "$(group)" };
  mode => "$(mode)";
}

body contain u_in_dir(dir)
{
  chdir => "$(dir)";
  no_output => "true";
}

body classes u_local(x)
{
  promise_kept => { "$(x)_ok", "$(x)_kept", "$(x)_reached" };
  promise_repaired => { "$(x)_ok", "$(x)_repaired", "$(x)_reached" };
  repair_failed => { "$(x)_error", "$(x)_repair_failed", "$(x)_reached" };
  repair_denied => { "$(x)_error", "$(x)_repair_denied", "$(x)_reached" };
  repair_timeout => { "$(x)_error", "$(x)_repair_timeout", "$(x)_reached" };
  scope => "bundle";
}
