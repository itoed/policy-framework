#!/usr/bin/python

import sys
from itertools import tee, izip, chain
from json import loads, dumps
import logging

def pairwise(iterable):
    a, b = tee(iterable)
    next(b, None)
    return izip(a, b)

# The result is like [ (x, y, z), (a, b, c) ]
def strongly_connected_components(graph):
    """
    Tarjan's Algorithm (named for its discoverer, Robert Tarjan) is a graph theory algorithm
    for finding the strongly connected components of a graph.
    
    Based on: http://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm

    Source: http://www.logarithmic.net/pfh-files/blog/01208083168/tarjan.py
    """

    index_counter = [0]
    stack = []
    lowlinks = {}
    index = {}
    result = []
    
    def strongconnect(node):
        # set the depth index for this node to the smallest unused index
        index[node] = index_counter[0]
        lowlinks[node] = index_counter[0]
        index_counter[0] += 1
        stack.append(node)
    
        # Consider successors of `node`
        try:
            successors = graph[node]
        except:
            successors = []
        for successor in successors:
            if successor not in lowlinks:
                # Successor has not yet been visited; recurse on it
                strongconnect(successor)
                lowlinks[node] = min(lowlinks[node],lowlinks[successor])
            elif successor in stack:
                # the successor is in the stack and hence in the current strongly connected component (SCC)
                lowlinks[node] = min(lowlinks[node],index[successor])
        
        # If `node` is a root node, pop the stack and generate an SCC
        if lowlinks[node] == index[node]:
            connected_component = []
            
            while True:
                successor = stack.pop()
                connected_component.append(successor)
                if successor == node: break
            component = tuple(connected_component)
            # storing the result
            result.append(component)
    
    for node in graph:
        if node not in lowlinks:
            strongconnect(node)
    
    return result

# Parse the namespace from a CFEngine bundle or variable name
# Example: "default:mybundle.myvar" returns default
def parse_namespace(varname):
    return varname.split(":")[0]

# Parse the namespace from a CFEngine bundle or variable name
# Example: "default:mybundle.myvar" returns default
def parse_assignment(expr):
    return varname.split("=")[0]

# Sort items of the format namespace:item as per a list of namespaces
def sort_by_namespace(iterable, namespaces):
    return  [ i for ns in namespaces for i in iterable if parse_namespace(i) == ns ]

# Returns a string surrounded by quotation marks
def quote_str(x):
  return '"' + x + '"'

# Prints a CFEngine value string, like =myvar="Hello"
def print_scalar_var(name, value):
    print "={0}={1}".format(name, value)

# Prints a CFEngine list string, like @mylist={ "a", "b", "c" }
def print_list_var(name, iterable):
    if iterable:
        items_str = '{ ' + ', '.join([ quote_str(i) for i in iterable ]) + ' }'
        print "@{0}={1}".format(name, items_str)

# Prints a CFEngine array string, like =myarray[k]=v
def print_array_var(name, dictvar):
    for k, v in dictvar.iteritems():
      print "={0}[{1}]={2}".format(name, k, v)

# Prints a CFEngine data string, like %mydata={ "a": "b" }
def print_data_var(name, dictvar):
    print "%{0}={1}".format(name, dumps(dictvar))

# Module start

#logging.basicConfig(filename='example.log', level=logging.DEBUG)

args = loads(sys.argv[1])
dep_args = args["dependency_vars"]

dep_lists = [ v + [ parse_namespace(k) ] for (k, v) in dep_args.iteritems() ]

graph = {}

for deps in dep_lists:
    for a, b in pairwise(deps):
        graph[b] = graph[b] + [ a ] if b in graph else [ a ]

results = {}

namespaces = list(chain.from_iterable(strongly_connected_components(graph)))
results["namespaces"] = namespaces
results["bundles"] = {}

for ns in namespaces:
    bundles = {}
    #
    # Find config bundles
    #
    config_bundles = [ k for k, v in args["namespace_bundles"].iteritems() if
        k.startswith(ns + ":") and "config" in v ]
    if len(config_bundles) > 1:
        raise Exception("Multiple config bundles for namespace " +
            ns + ": " + str(bundles))
    if len(config_bundles) == 1:
        bundles["config_bundle"] = config_bundles[0]
    #
    # Find validation bundles
    #
    validation_bundles = [ k for k, v in args["namespace_bundles"].iteritems() if
        k.startswith(ns + ":") and "validation" in v ]
    if len(validation_bundles) > 1:
        raise Exception("Multiple validation bundles for namespace " +
            ns + ": " + str(bundles))
    if len(validation_bundles) == 1:
        bundles["validation_bundle"] = validation_bundles[0]
    #
    # Find control bundles
    #
    control_bundles = [ k for k, v in args["namespace_bundles"].iteritems() if
        k.startswith(ns + ":") and "control" in v ]
    if len(control_bundles) > 1:
        raise Exception("Multiple control bundles for namespace " +
            ns + ": " + str(bundles))
    if len(control_bundles) == 1:
        bundles["control_bundle"] = control_bundles[0]
    #
    # Find info bundles
    #
    info_bundles = [ k for k, v in args["extension_bundles"].iteritems()
                      if "info=" + ns in v ] 
    bundles["info_bundles"] = sort_by_namespace(info_bundles, namespaces)
    #
    # Find pre-control bundles
    #
    pre_control_bundles = [ k for k, v in args["extension_bundles"].iteritems()
                      if "pre_control=" + ns in v ] 
    bundles["pre_control_bundles"] = sort_by_namespace(pre_control_bundles, namespaces)
    #
    # Find post-control bundles
    #
    post_control_bundles = [ k for k, v in args["extension_bundles"].iteritems()
                      if "post_control=" + ns in v ] 
    bundles["post_control_bundles"] = sort_by_namespace(post_control_bundles, namespaces)
    #
    # Assign bundles to namespace
    #
    results["bundles"][ns] = bundles

print_data_var("results", results)
