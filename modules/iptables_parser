#!/usr/bin/env python

from __future__ import print_function

import json
import sys

SSH_PORTNUM = 22

class Port(object):
    def __init__(self, portnum):
        self.portnum = portnum
        self.name = None
        self.isopen = False

    @property
    def data(self):
        data = {}
        data["portnum"] = self.portnum
        data["name"] = self.name
        data["isopen"] = self.isopen
        return data

class ArgumentParser(object):
    def __init__(self):
        self.errors = []
        self.ports = []

    def parse(self, args):
        if len(args) != 2:
            self.errors.append(("Module iptables_parser must be "
                "invoked with exactly one argument: A JSON representation "
                "of ports"))
            return

        try:
             port_args = json.loads(args[1])
        except ValueError as e:
            self.errors.append("Invalid JSON '{0}'".format(args[2]))
            return

        # Ensure arguments are a dictionary
        if type(port_args) != dict:
            self.errors.append(
                ("Module iptables_parser is expected to be "
                 "invoked with a JSON dictionary but received '{0}'"
                ).format(args))
            return

        #
        # Parse ports
        #
        for portnum, port_arg in port_args.iteritems():
            if type(port_arg) != dict:
                self.errors.append(
                    ("Port '{0}' is expected to be defined as a dictionary "
                     "but received '{1}'"
                    ).format(portnum, json.dumps(port_arg)))
                continue

            port = Port(portnum)
            port_valid = True

            if "name" not in port_arg:
                port_valid = False
                self.errors.append(
                    ("Port '{0}' requires key 'name'").format(portnum))
            else:
                name = port_arg["name"]
                if not isinstance(name, basestring):
                    port_valid = False
                    self.errors.append(
                        ("Port '{0}' requires key 'name' with type string but "
                         "received '{1}'").format(portnum, json.dumps(name)))
                else:
                    port.name = name

            if "open" in port_arg:
                isopen = port_arg["open"]
                if not type(isopen) == bool:
                    port_valid = False
                    self.errors.append(
                        ("Port '{0}' requires key 'open' with type boolean "
                         "but received '{1}'"
                        ).format(portnum, json.dumps(isopen)))
                else:
                    port.isopen = isopen

            if port_valid:
                self.ports.append(port)

def main():
    errors = []
    ports = []

    argparser = ArgumentParser()
    argparser.parse(sys.argv)

    if argparser.errors:
        errors.extend(argparser.errors)
    else:
        ports.extend(argparser.ports)

        if not any([ p.portnum == SSH_PORTNUM for p in ports ]):
            ssh_port = Port(SSH_PORTNUM)
            ssh_port.name = "ssh"
            ssh_port.isopen = True
            ports.append(ssh_port)

        # Create result data
        data = sorted([ p.data for p in ports if p.isopen ],
                      key=lambda d: d["portnum"])

    if errors:
        print("+iptables_parser_error")
        print("%errors=" + json.dumps(errors))
    else:
        print("+iptables_parser_ok")
        print("%data=" + json.dumps(data, sort_keys=True))

if __name__ == "__main__":
    main()
