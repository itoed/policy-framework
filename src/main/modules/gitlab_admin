#!/usr/bin/env python

from __future__ import print_function
from contextlib import closing
from bcrypt import hashpw, gensalt
from mysql.connector import errorcode

import argparse
import json
import mysql.connector
import sys
import traceback

class GitlabAdminException(Exception):
    pass

def print_errors(messages):
    jsonlist = json.dumps([ m.rstrip() for m in messages if m])
    print("%errors=" + jsonlist)

class Logger(object):
    log = []
    def write(self, data):
        self.log.append(data)

#
#   Initialize flags for CFEngine classes
#
email_repaired = False
password_repaired = False
password_expires_repaired = False
admin_ok = False

logger = Logger()
sys.stderr = logger

try:
    #
    #   Parse arguments
    #
    parser = argparse.ArgumentParser()
    parser.add_argument("dbuser", help="Username to login to MySQL")
    parser.add_argument("dbpass", help="Password to login to MySQL")
    parser.add_argument("-e", "--email", help="Email for Gitlab admin login")
    parser.add_argument("-p", "--password", help="Password for Gitlab admin login")
    args = parser.parse_args()

    #
    #   Connect to MySQL to verify and repair
    #
    with closing(mysql.connector.connect(
            user=args.dbuser,
            password=args.dbpass,
            database="gitlabhq_production")) as cnx:
        # Changes will be rolled back in case of any error
        cnx.start_transaction()
        try:
            with closing(cnx.cursor()) as cursor:
                # Find admin user
                cursor.execute(
                    ("SELECT email, encrypted_password, password_expires_at "
                     "FROM users WHERE username = %s"),
                    ("root",))

                (stored_email, stored_hash, pwexpires) = cursor.fetchone()

                if args.email and args.email != stored_email:
                    # Repair email
                    cursor.execute(
                        "UPDATE users SET email = %s WHERE username = %s",
                        (args.email, "root"))
                    email_repaired = True

                if (args.password
                        and hashpw(args.password, stored_hash) != stored_hash):
                    # Repair password
                    expected_hash = hashpw(args.password, gensalt())
                    cursor.execute(
                        ("UPDATE users SET encrypted_password = %s "
                         "WHERE username = %s"),
                        (expected_hash, "root"))
                    password_repaired = True

                if pwexpires and args.password:
                    # Repair password expiration by removing it
                    # if a password was given
                    cursor.execute(
                        ("UPDATE users SET password_expires_at = %s "
                         "WHERE username = %s "),
                        (None, "root"))
                    password_expires_repaired = True

                cnx.commit()
                admin_ok = True
            # Cursor is now closed
        # End of transaction
        except Exception as e:
            cnx.rollback()
            print_errors(traceback.format_exc().split("\n"))
    # Connection is now closed
except mysql.connector.Error as e:
    if e.errno == errorcode.ER_ACCESS_DENIED_ERROR:
        print_errors("Database username or password incorrect")
    elif e.errno == errorcode.ER_BAD_DB_ERROR:
        print_errors("Database does not exist")
    else:
        print_errors(traceback.format_exc().split("\n"))
except Exception as e:
    print_errors(traceback.format_exc().split("\n"))
except SystemExit as e:
    print_errors(logger.log)

#
#   Print CFEngine classes
#
if admin_ok:
    if email_repaired:
        print("+admin_email_repaired")
    else:
        print("+admin_email_kept")
    if password_repaired:
        print("+admin_password_repaired")
    else:
        print("+admin_password_kept")
    if password_expires_repaired:
        print("+admin_password_expires_repaired")
    else:
        print("+admin_password_expires_kept")

    if email_repaired or password_repaired or password_expires_repaired:
        print("+admin_repaired")
    else:
        print("+admin_kept")

    print("+admin_ok")
else:
    print("+admin_error")
