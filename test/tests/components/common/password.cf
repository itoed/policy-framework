# PASSWORD TEST
#

body file control
{
  namespace => "test";
     inputs => {
                "$(test:knowledge.inputs)",
                "$(inputs:components.common[password])",
               };
}

bundle agent A01_verifyPassword_plainTextMatchesHash_matchClassIsSet
{
  meta:
      "tags"             slist => { "test" };

  methods:
      "encrypt_password"        usebundle => password:verify_password("helloworld",
                        "$2a$12$kSfTFRP/qzhVtyzXBI0I9ub1zcvDEEau90nMN3WHF6yGaPsvpLk9K"),
                                useresult => "verify";

      "assert_match_is_set"     usebundle => assert_class("$(verify[match])");
      "assert_no_match_not_set" usebundle => assert_not_class("$(verify[no_match])");
}

bundle agent A02_verifyPassword_plainTextDoesNotMatchesHash_noMatchClassIsSet
{
  meta:
      "tags"             slist => { "test" };

  methods:
      "encrypt_password"        usebundle => password:verify_password("goodbye!",
                        "$2a$12$kSfTFRP/qzhVtyzXBI0I9ub1zcvDEEau90nMN3WHF6yGaPsvpLk9K"),
                                useresult => "verify";

      "assert_no_match_is_set"  usebundle => assert_class("$(verify[no_match])");
      "assert_match_not_set"    usebundle => assert_not_class("$(verify[match])");
}

bundle agent A03_encryptPassword_plainTextPasswordGiven_generatedPasswordHasSixtyChars
{
  meta:
      "tags"             slist => { "test" };

  methods:
      "encrypt_password"        usebundle => password:encrypt_password("goodbye!"),
                                useresult => "encrypted_password";

      "assert"                  usebundle => assert_string_equals("60",
                                  string_length("$(encrypted_password[result])"));
}
