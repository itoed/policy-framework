# JENKINS TEST
#

body file control
{
  namespace => "test";
  inputs => {
                "$(test:knowledge.inputs)",
                "$(inputs:components.daemons[jenkins])",
            };
}

bundle agent A1_01_validate_noVersion_validationOkClassNotSet
{
  meta:
      "tags"        slist => { "test" };

  methods:
      "validate"          usebundle => jenkins:validate;
      "ok"                usebundle => assert_not_class("jenkins:validation_ok");
}

bundle agent A1_02_validate_validConfig_validationOkClassSet
{
  meta:
      "tags"        slist => { "test" };

  vars:
      "info"          data => parsejson('{
        "version":    "1",
        "release":    "1",
        "url":        "jenkins.test.local",
        "admin": {
          "email":    "jenkins@test.local"
        }
      }');

  methods:
      "config"            usebundle => jenkins:config(@(info));
      "validate"          usebundle => jenkins:validate;
      "validation_ok"     usebundle => assert_class("jenkins:validation_ok");
}

bundle agent B1_configXmlFile_validConfig_fileContentsMatch
{
  meta:
      "tags"        slist => { "test", "tmpdir" };

  vars:
      "info"          data => parsejson('{
        "homedir":    "$(knowledge.tmp_dir)",
        "owner":      "$(knowledge.env_user)",
        "version":    "1.0"
      }');

  files:
      "$(knowledge.tmp_dir)/expected.xml"
         create => "true",
      edit_line => insert_lines('<?xml version=\'1.0\' encoding=\'UTF-8\'?>
<hudson>
  <disabledAdministrativeMonitors/>
  <version>1.0</version>
  <numExecutors>2</numExecutors>
  <mode>NORMAL</mode>
  <useSecurity>true</useSecurity>
  <authorizationStrategy class="hudson.security.GlobalMatrixAuthorizationStrategy">
    <permission>com.cloudbees.plugins.credentials.CredentialsProvider.Create:admin</permission>
    <permission>com.cloudbees.plugins.credentials.CredentialsProvider.Delete:admin</permission>
    <permission>com.cloudbees.plugins.credentials.CredentialsProvider.ManageDomains:admin</permission>
    <permission>com.cloudbees.plugins.credentials.CredentialsProvider.Update:admin</permission>
    <permission>com.cloudbees.plugins.credentials.CredentialsProvider.View:admin</permission>
    <permission>hudson.model.Computer.Build:admin</permission>
    <permission>hudson.model.Computer.Configure:admin</permission>
    <permission>hudson.model.Computer.Connect:admin</permission>
    <permission>hudson.model.Computer.Create:admin</permission>
    <permission>hudson.model.Computer.Delete:admin</permission>
    <permission>hudson.model.Computer.Disconnect:admin</permission>
    <permission>hudson.model.Hudson.Administer:admin</permission>
    <permission>hudson.model.Hudson.ConfigureUpdateCenter:admin</permission>
    <permission>hudson.model.Hudson.Read:admin</permission>
    <permission>hudson.model.Hudson.RunScripts:admin</permission>
    <permission>hudson.model.Hudson.UploadPlugins:admin</permission>
    <permission>hudson.model.Item.Build:admin</permission>
    <permission>hudson.model.Item.Cancel:admin</permission>
    <permission>hudson.model.Item.Configure:admin</permission>
    <permission>hudson.model.Item.Create:admin</permission>
    <permission>hudson.model.Item.Delete:admin</permission>
    <permission>hudson.model.Item.Discover:admin</permission>
    <permission>hudson.model.Item.Read:admin</permission>
    <permission>hudson.model.Item.Workspace:admin</permission>
    <permission>hudson.model.View.Configure:admin</permission>
    <permission>hudson.model.View.Create:admin</permission>
    <permission>hudson.model.View.Delete:admin</permission>
    <permission>hudson.model.View.Read:admin</permission>
  </authorizationStrategy>
  <securityRealm class="hudson.security.HudsonPrivateSecurityRealm">
    <disableSignup>true</disableSignup>
    <enableCaptcha>false</enableCaptcha>
  </securityRealm>
  <disableRememberMe>false</disableRememberMe>
  <projectNamingStrategy class="jenkins.model.ProjectNamingStrategy$DefaultProjectNamingStrategy"/>
  <workspaceDir>${ITEM_ROOTDIR}/workspace</workspaceDir>
  <buildsDir>${ITEM_ROOTDIR}/builds</buildsDir>
  <markupFormatter class="hudson.markup.RawHtmlMarkupFormatter">
    <disableSyntaxHighlighting>false</disableSyntaxHighlighting>
  </markupFormatter>
  <jdks/>
  <viewsTabBar class="hudson.views.DefaultViewsTabBar"/>
  <myViewsTabBar class="hudson.views.DefaultMyViewsTabBar"/>
  <clouds/>
  <slaves/>
  <quietPeriod>5</quietPeriod>
  <scmCheckoutRetryCount>0</scmCheckoutRetryCount>
  <views>
    <hudson.model.AllView>
      <owner class="hudson" reference="../../.."/>
      <name>All</name>
      <filterExecutors>false</filterExecutors>
      <filterQueue>false</filterQueue>
      <properties class="hudson.model.View$PropertyList"/>
    </hudson.model.AllView>
  </views>
  <primaryView>All</primaryView>
  <slaveAgentPort>0</slaveAgentPort>
  <label></label>
  <nodeProperties/>
  <globalNodeProperties/>
</hudson>');

  methods:
      "config"              usebundle => jenkins:config(@(info));
      "config_xml"          usebundle => jenkins:config_xml;

    chomp_reached::
      "diff_contents"       usebundle => assert_file_diff(
                              "$(knowledge.tmp_dir)/expected.xml",
                              "$(knowledge.tmp_dir)/config.xml");
  #
  # NOTE: Jenkins does not add a newline at the end of the file
  # The command below will remove the newline so the test can pass
  # If the template file is edited in vim, the newline will be added back
  #
  commands:
      "/usr/bin/perl -i -pe 'chomp if eof' $(knowledge.tmp_dir)/expected.xml"
      classes => test_local("chomp");
}

bundle agent C1_locationFile_emailAndUrlGiven_fileContentsMatch
{
  meta:
      "tags"        slist => { "test", "tmpdir" };

  vars:
      "actual_file"   string => concat("$(knowledge.tmp_dir)/jenkins.model.",
                                       "JenkinsLocationConfiguration.xml");

      "info"            data => parsejson('{
        "homedir":      "$(knowledge.tmp_dir)",
        "owner":        "$(knowledge.env_user)",
        "url":          "http://jenkins.localhost",
        "admin": {
          "email":      "jenkins@localhost"
        }
      }');

  files:
      "$(knowledge.tmp_dir)/expected.xml"
         create => "true",
      edit_line => insert_lines("<?xml version='1.0' encoding='UTF-8'?>
<jenkins.model.JenkinsLocationConfiguration>
  <adminAddress>jenkins@localhost</adminAddress>
  <jenkinsUrl>http://jenkins.localhost/</jenkinsUrl>
</jenkins.model.JenkinsLocationConfiguration>");

  methods:
      "config"              usebundle => jenkins:config(@(info));
      "location_xml"        usebundle => jenkins:location_xml;

    chomp_reached::
      "diff_contents"       usebundle => assert_file_diff(
                              "$(knowledge.tmp_dir)/expected.xml",
                              "$(actual_file)");
  #
  # NOTE: Jenkins does not add a newline at the end of the file
  # The command below will remove the newline so the test can pass
  # If the template file is edited in vim, the newline will be added back
  #
  commands:
      "/usr/bin/perl -i -pe 'chomp if eof' $(knowledge.tmp_dir)/expected.xml"
      classes => test_local("chomp");
}

bundle agent D1_mavenTasksFile_TwoMavenInstallations_fileMatches
{
  meta:
      "tags"        slist => { "test", "tmpdir" };

  vars:
      "info"          data => parsejson('{
        "homedir":    "$(knowledge.tmp_dir)",
        "owner":      "$(knowledge.env_user)",
        "maven_installations": {
          "Maven 3.2.1":    "/some-directory/apache-maven/apache-maven-3.2.1",
          "Maven 3.0.5":    "/some-directory/apache-maven/apache-maven-3.0.5"
        }
      }');

  files:
      "$(knowledge.tmp_dir)/expected.xml"
         create => "true",
      edit_line => insert_lines("<?xml version='1.0' encoding='UTF-8'?>
<hudson.tasks.Maven_-DescriptorImpl>
  <installations>
    <hudson.tasks.Maven_-MavenInstallation>
      <name>Maven 3.2.1</name>
      <home>/some-directory/apache-maven/apache-maven-3.2.1</home>
      <properties/>
    </hudson.tasks.Maven_-MavenInstallation>
    <hudson.tasks.Maven_-MavenInstallation>
      <name>Maven 3.0.5</name>
      <home>/some-directory/apache-maven/apache-maven-3.0.5</home>
      <properties/>
    </hudson.tasks.Maven_-MavenInstallation>
  </installations>
</hudson.tasks.Maven_-DescriptorImpl>");

  methods:
      "config"              usebundle => jenkins:config(@(info));
      "maven_tasks_file"    usebundle => jenkins:maven_tasks_file;

    chomp_reached::
      "diff_contents"       usebundle => assert_file_diff(
                              "$(knowledge.tmp_dir)/expected.xml",
                              "$(knowledge.tmp_dir)/hudson.tasks.Maven.xml");
  #
  # NOTE: Jenkins does not add a newline at the end of the file
  # The command below will remove the newline so the test can pass
  # If the template file is edited in vim, the newline will be added back
  #
  commands:
      "/usr/bin/perl -i -pe 'chomp if eof' $(knowledge.tmp_dir)/expected.xml"
      classes => test_local("chomp");
}

bundle edit_line insert_lines(lines)
{
  insert_lines:
      "$(lines)";
}

body classes test_local(x)
{
      promise_kept => { "$(x)_ok", "$(x)_kept", "$(x)_reached" };
  promise_repaired => { "$(x)_ok", "$(x)_repaired", "$(x)_reached" };
     repair_failed => { "$(x)_error", "$(x)_repair_failed", "$(x)_reached" };
     repair_denied => { "$(x)_error", "$(x)_repair_denied", "$(x)_reached" };
    repair_timeout => { "$(x)_error", "$(x)_repair_timeout", "$(x)_reached" };
             scope => "bundle";
}
